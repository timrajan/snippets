   var lastStudent = await _context.testdata
         .FirstOrDefaultAsync(s => s.emailaddress.ToLower() == createStudentDto.myemailaddress.ToLower()
         );


using Microsoft.EntityFrameworkCore;
using StudentAPI.Data;
using StudentAPI.Services; // Add this using statement

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllers();

// Register DbContext with PostgreSQL
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register your StudentService
builder.Services.AddScoped<IStudentService, StudentService>();
// OR if you don't have an interface:
// builder.Services.AddScoped<StudentService>();

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();
