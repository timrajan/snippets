var connectionString = _configuration.GetConnectionString("DefaultConnection");
            
            using var connection = new NpgsqlConnection(connectionString);
            await connection.OpenAsync();

            // Read your SQL file
            var sqlFilePath = Path.Combine(_environment.ContentRootPath, "SqlScripts", "insertdata.sql");
            
            if (!File.Exists(sqlFilePath))
            {
                throw new FileNotFoundException($"SQL file not found: {sqlFilePath}");
            }

            var sqlTemplate = await File.ReadAllTextAsync(sqlFilePath);

            // Safe string replacement with proper SQL escaping
            var sql = sqlTemplate
                .Replace("{{INPUT_FIRSTNAME}}", $"'{EscapeSqlString(createStudentDto.FirstName)}'")
                .Replace("{{INPUT_LASTNAME}}", $"'{EscapeSqlString(createStudentDto.LastName)}'")
                .Replace("{{INPUT_EMAIL}}", $"'{EscapeSqlString(createStudentDto.Email)}'")
                .Replace("{{INPUT_PHONENUMBER}}", createStudentDto.PhoneNumber != null ? $"'{EscapeSqlString(createStudentDto.PhoneNumber)}'" : "NULL")
                .Replace("{{INPUT_DATEOFBIRTH}}", $"'{createStudentDto.DateOfBirth:yyyy-MM-dd}'")
                .Replace("{{INPUT_MAJOR}}", $"'{EscapeSqlString(createStudentDto.Major)}'")
                .Replace("{{INPUT_GPA}}", createStudentDto.GPA.ToString("F2"))
                .Replace("{{INPUT_STATUS}}", ((int)createStudentDto.Status).ToString())
                .Replace("{{INPUT_ENROLLMENTDATE}}", $"'{(createStudentDto.EnrollmentDate ?? DateTime.UtcNow):yyyy-MM-dd}'")
                .Replace("{{INPUT_ADDRESS}}", createStudentDto.Address != null ? $"'{EscapeSqlString(createStudentDto.Address)}'" : "NULL")
                .Replace("{{INPUT_CREATEDAT}}", $"'{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}'");

            // Execute the SQL
            using var command = new NpgsqlCommand(sql, connection);
            var result = await command.ExecuteScalarAsync();

            // If your SQL returns the new student ID
            if (result != null && int.TryParse(result.ToString(), out int studentId))
            {
                return await GetStudentByIdAsync(studentId) 
                    ?? throw new Exception("Failed to retrieve created student");
            }

            // If your SQL doesn't return ID, you'll need to get the last inserted student
            // This is a fallback - ideally modify your SQL to return the ID
            var lastStudent = await _context.Students
                .Where(s => s.Email == createStudentDto.Email)
                .OrderByDescending(s => s.CreatedAt)
                .FirstOrDefaultAsync();

            if (lastStudent != null)
            {
                return new StudentResponseDto
                {
                    Id = lastStudent.Id,
                    FirstName = lastStudent.FirstName,
                    LastName = lastStudent.LastName,
                    FullName = lastStudent.FullName,
                    Email = lastStudent.Email,
                    PhoneNumber = lastStudent.PhoneNumber,
                    DateOfBirth = lastStudent.DateOfBirth,
                    Age = lastStudent.Age,
                    Major = lastStudent.Major,
                    GPA = lastStudent.GPA,
                    Status = lastStudent.Status,
                    EnrollmentDate = lastStudent.EnrollmentDate,
                    GraduationDate = lastStudent.GraduationDate,
                    Address = lastStudent.Address,
                    CreatedAt = lastStudent.CreatedAt,
                    UpdatedAt = lastStudent.UpdatedAt
                };
            }

            throw new Exception("Failed to create student with SQL file");
        }

        // Helper method to safely escape SQL strings
        private string EscapeSqlString(string input)
        {
            if (string.IsNullOrEmpty(input))
                return string.Empty;
            
            // Escape single quotes by doubling them
            return input.Replace("'", "''");
        }
